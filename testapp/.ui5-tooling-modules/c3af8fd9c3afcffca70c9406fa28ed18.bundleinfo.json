{
  "_entries": [
    {
      "name": "ui5_bfsg_popover",
      "path": "/home/user/projects/ui5_BFSG_Popover/package/index.js",
      "lastModified": 1736850516377,
      "type": "module",
      "code": "sap.ui.define(['sap/ui/model/json/JSONModel', 'sap/ui/core/Fragment', 'sap/m/MessageToast'], (function (require$$0, require$$0$1, require$$0$2) { 'use strict';\n\n  const JSONModel$2 = require$$0;\n\n  function genConfigModel(view) {\n    const configModel = new JSONModel$2({\n      fontConfig: {\n        fontSize: 16,\n        contrastMode: false,\n      },\n      contrastConfig: {\n        backgroundColor: \"white\",\n        textColor: \"black\",\n        previewBackgroundColor: \"white\",\n        previewTextColor: \"black\",\n      },\n      blueFilterConfig: {\n        blueFilterActive: false,\n        blueFilterIntensity: 32,\n        blaufilterExpanded: true,\n      },\n      readWebsiteConfig: {\n        speed: 1.0,\n        volume: 40,\n        isPlaying: false,\n        isPaused: false,\n        currentText: \"\",\n        mouseReadingActive: false,\n        lastReadElement: null,\n      },\n    });\n\n    view.setModel(configModel, \"configModel\");\n    return configModel;\n  }\n\n  function fetchStyle$1() {\n    let link = document.createElement(\"link\");\n    link.rel = \"stylesheet\";\n    link.type = \"text/css\";\n    link.href = \"resources/ui5_bfsg_popover/css/bfsg_style.css\";\n    document.head.appendChild(link);\n    console.log(\"Custom CSS loaded.\");\n  }\n\n  var helper = {\n    genConfigModel,\n    fetchStyle: fetchStyle$1,\n  };\n\n  const Fragment$1 = require$$0$1;\n\n  async function loadPopover(context, popoverName, fragmentPath, source) {\n    if (!context[popoverName]) {\n      try {\n        const popover = await Fragment$1.load({\n          id: context.view.createId(popoverName),\n          name: fragmentPath,\n          controller: context,\n        });\n\n        context.view.addDependent(popover);\n        context[popoverName] = popover;\n        console.log(`${popoverName} successfully loaded and attached to the view.`);\n      } catch (error) {\n        console.error(`An error occurred while loading the ${popoverName}:`, error);\n        return;\n      }\n    }\n\n    context[popoverName].openBy(source);\n    console.log(`${popoverName} opened by source:`, source);\n  }\n\n  async function onTabNavigationButtonPress$1(oEvent, context) {\n    const oSource = oEvent.getSource();\n    await loadPopover(context, \"tabNavigationPopover\", \"ui5_bfsg_popover.fragments.tabnavigation\", oSource);\n  }\n\n  async function onMoreFeaturesButtonPress$1(oEvent, context) {\n    const oSource = oEvent.getSource();\n    await loadPopover(context, \"moreFeaturesPopover\", \"ui5_bfsg_popover.fragments.morefeatures\", oSource);\n  }\n\n  var popover = {\n    onTabNavigationButtonPress: onTabNavigationButtonPress$1,\n    onMoreFeaturesButtonPress: onMoreFeaturesButtonPress$1,\n  };\n\n  const Fragment = require$$0$1;\n\n  async function buildPopover$1(context) {\n    try {\n      const popover = await Fragment.load({\n        id: context.view.createId(\"uniquePopover\"),\n        name: \"ui5_bfsg_popover.popover\",\n        controller: context,\n      });\n      context.popover = popover; \n      context.view.addDependent(popover);\n      console.log(\"Popover successfully loaded.\");\n    } catch (error) {\n      console.error(\"An error occurred while loading the popover:\", error);\n    }\n  }\n\n  function open$1(oButton, oData, context) {\n    if (!context.popover) {\n      console.warn(\"Popover is not loaded yet. Reloading...\");\n      buildPopover$1(context).then(() => {\n        if (context.popover) {\n          context.configModel.setData(oData, true);\n          context.popover.openBy(oButton);\n        } else {\n          console.error(\"Popover could not be loaded.\");\n        }\n      });\n      return;\n    }\n\n    context.configModel.setData(oData, true);\n    context.popover.openBy(oButton);\n  }\n\n  function onClose$1(context) {\n    if (context.popover) {\n      context.popover.close();\n      console.log(\"Popover closed.\");\n    } else {\n      console.warn(\"Popover is not available to close.\");\n    }\n  }\n\n  var builder = { buildPopover: buildPopover$1, open: open$1, onClose: onClose$1 };\n\n  function updateFontSize$1(oModel, oView, action) {\n      console.log(\"Font size action:\", action);\n      const currentSize = oModel.getProperty(\"/font/fontSize\");\n      let newSize = currentSize;\n\n      if (action === \"increase\" && currentSize < 40) {\n          newSize += 2;\n      } else if (action === \"decrease\" && currentSize > 10) {\n          newSize -= 2;\n      } else if (action === \"reset\") {\n          newSize = 16;\n      }\n\n      oModel.setProperty(\"/font/fontSize\", newSize); \n      applyFontSizeToView(oView, newSize);\n  }\n\n  function applyFontSizeToView(oView, fontSize) {\n      oView.findAggregatedObjects(true, (oControl) => {\n          const oDomRef = oControl.getDomRef();\n          if (oDomRef) {\n              oDomRef.style.fontSize = fontSize + \"px\";\n              updateChildFontSize(oDomRef, fontSize);\n          }\n          return false;\n      });\n  }\n\n  function updateChildFontSize(domElement, fontSize) {\n      const childNodes = domElement.querySelectorAll(\"*\");\n      childNodes.forEach((child) => {\n          child.style.fontSize = fontSize + \"px\";\n      });\n  }\n\n  var fontsize = {\n      updateFontSize: updateFontSize$1,\n      applyFontSizeToView,\n      updateChildFontSize,\n  };\n\n  const JSONModel$1 = require$$0;\n\n  function initModel$1(view) {\n    const configModel = new JSONModel$1({\n      font: {\n        fontSize: 16,\n        contrastMode: false,\n        isExpanded: false,\n\n      },\n      contrast: {\n        buttonsVisible: false,\n        contrastValue:1,\n        isActive: false,\n        isExpanded: false,\n        backgroundColor: \"white\",\n        textColor: \"black\",\n        previewBackgroundColor: \"white\",\n        previewTextColor: \"black\",\n        originalState: {\n          backgroundColor: \"white\",\n          textColor: \"black\"\n        }\n      },\n      blueFilter: {\n        isActive: false,\n        blueFilterIntensity: 32,\n        blaufilterExpanded: false,\n      },\n      readWebsite: {\n        isExpanded: false,\n        speed: 1.0,\n        volume: 40,\n        isPlaying: false,\n        isPaused: false,\n        currentText: \"\",\n        mouseReadingActive: false,\n        lastReadElement: null,\n      },\n    });\n\n    view.setModel(configModel, \"configModel\");\n    return configModel;\n  }\n\n  var config = {\n    initModel: initModel$1,\n  };\n\n  var shortcuts = [\n  \t{\n  \t\taction: \"Exit Website Navigation\",\n  \t\tdescription: \"\",\n  \t\tkey: \"Esc / â†µ\"\n  \t},\n  \t{\n  \t\taction: \"Toggle Speech Output\",\n  \t\tdescription: \"\",\n  \t\tkey: \"F3\"\n  \t},\n  \t{\n  \t\taction: \"Show This Guide\",\n  \t\tdescription: \"\",\n  \t\tkey: \"F2\"\n  \t},\n  \t{\n  \t\taction: \"Select Next Element\",\n  \t\tdescription: \"Use SHIFT + TAB to go to the previous element.\",\n  \t\tkey: \"Tab\"\n  \t},\n  \t{\n  \t\taction: \"Reset Focus to Start\",\n  \t\tdescription: \"Focuses on the start of the page.\",\n  \t\tkey: \"S\"\n  \t},\n  \t{\n  \t\taction: \"Next Heading\",\n  \t\tdescription: \"\",\n  \t\tkey: \"H\"\n  \t},\n  \t{\n  \t\taction: \"Heading Level 1-6\",\n  \t\tdescription: \"Select precise headings by pressing numbers 1-6.\",\n  \t\tkey: \"1 - 6\"\n  \t},\n  \t{\n  \t\taction: \"Next Image/Graphic\",\n  \t\tdescription: \"\",\n  \t\tkey: \"G\"\n  \t},\n  \t{\n  \t\taction: \"Next Link\",\n  \t\tdescription: \"\",\n  \t\tkey: \"K\"\n  \t},\n  \t{\n  \t\taction: \"Next Landmark\",\n  \t\tdescription: \"\",\n  \t\tkey: \"D\"\n  \t},\n  \t{\n  \t\taction: \"Next List\",\n  \t\tdescription: \"\",\n  \t\tkey: \"L\"\n  \t},\n  \t{\n  \t\taction: \"Next List Item\",\n  \t\tdescription: \"\",\n  \t\tkey: \"I\"\n  \t},\n  \t{\n  \t\taction: \"Next Form Field\",\n  \t\tdescription: \"\",\n  \t\tkey: \"F\"\n  \t},\n  \t{\n  \t\taction: \"Next Input Field\",\n  \t\tdescription: \"\",\n  \t\tkey: \"E\"\n  \t},\n  \t{\n  \t\taction: \"Next Button\",\n  \t\tdescription: \"\",\n  \t\tkey: \"B\"\n  \t},\n  \t{\n  \t\taction: \"Next Combo Box\",\n  \t\tdescription: \"\",\n  \t\tkey: \"C\"\n  \t},\n  \t{\n  \t\taction: \"Next Embedded Object\",\n  \t\tdescription: \"\",\n  \t\tkey: \"O\"\n  \t},\n  \t{\n  \t\taction: \"Start Speech Output Mode\",\n  \t\tdescription: \"\",\n  \t\tkey: \"Alt + S\"\n  \t},\n  \t{\n  \t\taction: \"Start Keyboard Navigation\",\n  \t\tdescription: \"\",\n  \t\tkey: \"Alt + T\"\n  \t}\n  ];\n  var require$$6 = {\n  \tshortcuts: shortcuts\n  };\n\n  const sapMessageToast = require$$0$2;\n\n  function startReading$1(oModel, speechSynth, getVisibleText) {\n    if (oModel.getProperty(\"/readWebsite/isPlaying\")) {\n      sapMessageToast.show(\"Reading is already in progress.\");\n      return;\n    }\n\n    const sText = getVisibleText();\n    if (!sText) {\n      sapMessageToast.show(\"No readable content found.\");\n      return;\n    }\n\n    oModel.setProperty(\"/readWebsite/currentText\", sText);\n\n    const utterance = new SpeechSynthesisUtterance(sText);\n    configureUtterance(utterance, oModel);\n    speechSynth.speak(utterance);\n  }\n\n  function stopReading$1(oModel, speechSynth) {\n    if (speechSynth.speaking || speechSynth.pending) {\n      speechSynth.cancel();\n      oModel.setProperty(\"/readWebsite/isPlaying\", false);\n      sapMessageToast.show(\"Reading stopped.\");\n    }\n  }\n\n  function increaseSpeed$1(oModel, utterance, speechSynth) {\n    const currentSpeed = parseFloat(oModel.getProperty(\"/readWebsite/speed\"));\n\n    if (currentSpeed < 2.0) {\n      const newSpeed = (currentSpeed + 0.1).toFixed(1);\n      oModel.setProperty(\"/readWebsite/speed\", newSpeed);\n\n      if (utterance && speechSynth.speaking) {\n        utterance.rate = newSpeed;\n        sapMessageToast.show(`Speed increased to ${newSpeed}x.`);\n      } else {\n        sapMessageToast.show(`Speed set to ${newSpeed}x. Start reading to apply.`);\n      }\n    } else {\n      sapMessageToast.show(\"Maximum speed reached.\");\n    }\n  }\n\n  function decreaseSpeed$1(oModel, utterance, speechSynth) {\n    const currentSpeed = parseFloat(oModel.getProperty(\"/readWebsite/speed\"));\n\n    if (currentSpeed > 0.5) {\n      const newSpeed = (currentSpeed - 0.1).toFixed(1);\n      oModel.setProperty(\"/readWebsite/speed\", newSpeed);\n\n      if (utterance && speechSynth.speaking) {\n        utterance.rate = newSpeed;\n        sapMessageToast.show(`Speed decreased to ${newSpeed}x.`);\n      } else {\n        sapMessageToast.show(`Speed set to ${newSpeed}x. Start reading to apply.`);\n      }\n    } else {\n      sapMessageToast.show(\"Minimum speed reached.\");\n    }\n  }\n\n  function configureUtterance(utterance, oModel, speechSynth) {\n    utterance.rate = oModel.getProperty(\"/readWebsite/speed\");\n    utterance.volume = oModel.getProperty(\"/readWebsite/volume\") / 100;\n    utterance.lang = \"en-US\";\n\n    utterance.onstart = () => oModel.setProperty(\"/readWebsite/isPlaying\", true);\n    utterance.onend = () => oModel.setProperty(\"/readWebsite/isPlaying\", false);\n    utterance.onerror = () => oModel.setProperty(\"/readWebsite/isPlaying\", false);\n  }\n\n  function getVisibleTextFromPage$1() {\n    const visibleText = Array.from(document.body.querySelectorAll(\"*\"))\n      .filter(\n        (el) =>\n          el.offsetParent !== null &&\n          el.innerText.trim() !== \"\" &&\n          window.getComputedStyle(el).visibility !== \"hidden\"\n      )\n      .map((el) => el.innerText.trim())\n      .join(\" \");\n\n    return visibleText;\n  }\n\n  var readWebsite = {\n    startReading: startReading$1,\n    stopReading: stopReading$1,\n    increaseSpeed: increaseSpeed$1,\n    decreaseSpeed: decreaseSpeed$1,\n    configureUtterance,\n    getVisibleTextFromPage: getVisibleTextFromPage$1,\n  };\n\n  function onContrastModeButtonPress$1(oModel, oBody) {\n      const isExpanded = oModel.getProperty(\"/contrast/isExpanded\");\n      const isContrastActive = oModel.getProperty(\"/contrast/isActive\");\n      oModel.setProperty(\"/contrast/isExpanded\", !isExpanded);\n\n      if (!isContrastActive) {\n          const defaultContrastValue = 1.5; \n          oBody.style.filter = `contrast(${defaultContrastValue})`;\n          oModel.setProperty(\"/contrast/isActive\", true);\n          oModel.setProperty(\"/contrast/contrastValue\", defaultContrastValue);\n\n          console.log(`Contrast mode activated with value ${defaultContrastValue}.`);\n      } else {\n          oBody.style.filter = \"\"; \n          oModel.setProperty(\"/contrast/isActive\", false);\n          oModel.setProperty(\"/contrast/contrastValue\", 1); \n\n          console.log(\"Contrast mode deactivated.\");\n      }\n  }\n\n\n  function contrastPreviewBgColorPress$1(oEvent, view, configModel) {\n      const oButton = oEvent.getSource();\n      const aCustomData = oButton.getCustomData();\n\n      if (!aCustomData || aCustomData.length === 0) {\n          console.error(\"CustomData not found on button!\");\n          return;\n      }\n\n      const sBgColor = aCustomData[0].getValue();\n      const oTextControl = view.byId(\"idCanYouReadThisText\");\n      let oDomRef;\n      if (oTextControl) {\n          oDomRef = oTextControl.getDomRef(); \n      } else {\n          console.error(\"Text control not found!\");\n          return;\n      }\n\n      if (oDomRef) {\n          oDomRef.style.backgroundColor = sBgColor;\n          configModel.setProperty(\"/contrast/buttonsVisible\", true); // ButonlarÄ± gÃ¶rÃ¼nÃ¼r yap\n      }\n  }\n\n  function contrastPreviewTextColorPress$1(oEvent, view, configModel) {\n      const oButton = oEvent.getSource();\n      const aCustomData = oButton.getCustomData();\n\n      if (!aCustomData || aCustomData.length === 0) {\n          console.error(\"CustomData not found on button!\");\n          return;\n      }\n\n      const sTextColor = aCustomData[0].getValue();\n      const oTextControl = view.byId(\"idCanYouReadThisText\");\n      let oDomRef;\n      if (oTextControl) {\n          oDomRef = oTextControl.getDomRef();\n      } else {\n          console.error(\"Text control not found!\");\n          return;\n      }\n\n      if (oDomRef) {\n          oDomRef.style.color = sTextColor;\n          configModel.setProperty(\"/contrast/buttonsVisible\", true); // ButonlarÄ± gÃ¶rÃ¼nÃ¼r yap\n      }\n  }\n\n\n  function onButtonContrastResetPress$1(view, configModel) {\n      const sDefaultBgColor = \"white\";\n      const sDefaultTextColor = \"black\";\n\n      const oTextControl = view.byId(\"idCanYouReadThisText\");\n      let oDomRef;\n      if (oTextControl) {\n          oDomRef = oTextControl.getDomRef();\n      } else {\n          console.error(\"Text control not found in SAPUI5 context! Trying direct DOM ID access...\");\n          oDomRef = document.getElementById(\"container-testapp---MainView--uniquePopover--idCanYouReadThisText\");\n      }\n\n      if (oDomRef) {\n          oDomRef.style.backgroundColor = sDefaultBgColor;\n          oDomRef.style.color = sDefaultTextColor;\n      } else {\n          console.error(\"DOM element not found!\");\n      }\n\n      configModel.setProperty(\"/contrast/buttonsVisible\", false);\n      console.log(\"Colors have been reset to default values.\");\n  }\n\n  function onSaveButtonPress$1(view, configModel) {\n      const oTextControl = view.byId(\"idCanYouReadThisText\");\n      let oDomRef;\n      if (oTextControl) {\n          oDomRef = oTextControl.getDomRef();\n      } else {\n          console.error(\"Text control not found!\");\n          return;\n      }\n\n      if (oDomRef) {\n          const sCurrentBgColor = oDomRef.style.backgroundColor || \"white\";\n          const sCurrentTextColor = oDomRef.style.color || \"black\";\n\n          console.log(`Saved settings: Background Color = ${sCurrentBgColor}, Text Color = ${sCurrentTextColor}`);\n      }\n\n      configModel.setProperty(\"/contrast/buttonsVisible\", false); // ButonlarÄ± gizle\n      configModel.setProperty(\"/contrast/isExpanded\", false); // Paneli kapat\n  }\n\n\n  function onCancelButtonPress$1(view, configModel) {\n      const sBgColor = configModel.getProperty(\"/contrast/backgroundColor\");\n      const sTextColor = configModel.getProperty(\"/contrast/textColor\");\n\n      const oTextControl = view.byId(\"idCanYouReadThisText\");\n      let oDomRef;\n      if (oTextControl) {\n          oDomRef = oTextControl.getDomRef();\n      } else {\n          console.error(\"Text control not found in SAPUI5 context! Trying direct DOM ID access...\");\n          oDomRef = document.getElementById(\"container-testapp---MainView--uniquePopover--idCanYouReadThisText\");\n      }\n\n      if (oDomRef) {\n          oDomRef.style.backgroundColor = sBgColor;\n          oDomRef.style.color = sTextColor;\n      } else {\n          console.error(\"DOM element not found!\");\n      }\n\n      configModel.setProperty(\"/contrast/buttonsVisible\", false);\n      console.log(\"Changes have been canceled.\");\n  }\n\n  var contrast = {\n      onContrastModeButtonPress: onContrastModeButtonPress$1,\n      contrastPreviewBgColorPress: contrastPreviewBgColorPress$1,\n      contrastPreviewTextColorPress: contrastPreviewTextColorPress$1,\n      onButtonContrastResetPress: onButtonContrastResetPress$1,\n      onSaveButtonPress: onSaveButtonPress$1,\n      onCancelButtonPress: onCancelButtonPress$1,\n  };\n\n  function onButtonBlueFilterPress$1(oModel, oBody) {\n      const isBlueFilterActive = oModel.getProperty(\"/blueFilter/isActive\");\n\n      if (!isBlueFilterActive) {\n          oModel.setProperty(\"/blueFilter/isActive\", true);\n          oModel.setProperty(\"/blueFilter/blueFilterIntensity\", 32);\n          oModel.setProperty(\"/blueFilter/blaufilterExpanded\", true);\n          const intensity = oModel.getProperty(\"/blueFilter/blueFilterIntensity\");\n          oBody.style.filter = `brightness(${1 - intensity / 100}) sepia(0.4) saturate(1.8) hue-rotate(180deg)`;\n\n          console.log(\"Blue filter activated with default intensity 32.\");\n      } else {\n          oModel.setProperty(\"/blueFilter/isActive\", false);\n          oModel.setProperty(\"/blueFilter/blaufilterExpanded\", false);\n          oBody.style.filter = \"\";\n\n          console.log(\"Blue filter deactivated.\");\n      }\n  }\n\n  function onBlueFilterIntensitySliderLiveChange$1(oModel, intensity, oBody) {\n      oModel.setProperty(\"/blueFilter/blueFilterIntensity\", intensity);\n      oBody.style.filter = `brightness(${1 - intensity / 100}) sepia(0.4) saturate(1.8) hue-rotate(180deg)`;\n\n      console.log(`Blue filter intensity set to ${intensity}%`);\n  }\n\n  var bluefilter = {\n      onButtonBlueFilterPress: onButtonBlueFilterPress$1,\n      onBlueFilterIntensitySliderLiveChange: onBlueFilterIntensitySliderLiveChange$1,\n  };\n\n  function onNightModeButtonPress$1(oCore) {\n      const currentTheme = oCore.getConfiguration().getTheme();\n      const themeMapping = {\n          \"sap_horizon\": \"sap_horizon_dark\",\n          \"sap_horizon_dark\": \"sap_horizon\",\n          \"sap_fiori_3\": \"sap_fiori_3_dark\",\n          \"sap_fiori_3_dark\": \"sap_fiori_3\",\n          \"sap_fiori_3_hcb\": \"sap_fiori_3_hcw\",\n          \"sap_fiori_3_hcw\": \"sap_fiori_3_hcb\"\n      };\n      const newTheme = themeMapping[currentTheme] || \"sap_horizon_dark\";\n      oCore.applyTheme(newTheme);\n      console.log(`Theme switched from ${currentTheme} to ${newTheme}`);\n  }\n\n  var nightmode = {\n      onNightModeButtonPress: onNightModeButtonPress$1,\n  };\n\n  function onHideImagesButtonPress$1(oView, imagesHidden) {\n      const aImageControls = oView.findAggregatedObjects(true, (oControl) => {\n          return oControl.isA(\"sap.m.Image\");\n      });\n\n      imagesHidden = !imagesHidden;\n      aImageControls.forEach((oImage) => {\n          oImage.setVisible(!imagesHidden);\n      });\n\n      console.log(imagesHidden ? \"All images are now hidden.\" : \"All images are now visible.\");\n\n      return imagesHidden;\n  }\n\n  var hideimages = {\n      onHideImagesButtonPress: onHideImagesButtonPress$1,\n  };\n\n  const JSONModel = require$$0;\n  const { fetchStyle } = helper;\n  const {\n    onTabNavigationButtonPress,\n    onMoreFeaturesButtonPress,\n  } = popover;\n  const { buildPopover, open, onClose } = builder;\n  const { updateFontSize } = fontsize;\n  const { initModel } = config;\n  const keyboardShortcutsData = require$$6;\n  const {\n    startReading,\n    stopReading,\n    increaseSpeed,\n    decreaseSpeed,\n    getVisibleTextFromPage,\n  } = readWebsite;\n  const {\n    onContrastModeButtonPress,\n    contrastPreviewBgColorPress,\n    contrastPreviewTextColorPress,\n    onButtonContrastResetPress,\n    onSaveButtonPress,\n    onCancelButtonPress,\n  } = contrast;\n  const { onButtonBlueFilterPress, onBlueFilterIntensitySliderLiveChange } = bluefilter;\n  const { onNightModeButtonPress } = nightmode;\n  const { onHideImagesButtonPress } = hideimages;\n\n  class npm_popover {\n    constructor(view, control) {\n      this.view = view;\n      this.control = control;\n      this.popover = null;\n      this.speechSynth = window.speechSynthesis;\n      fetchStyle();\n\n      initModel(this.view);\n      this.configModel = this.view.getModel(\"configModel\");\n      const keyboardShortcutsModel = new JSONModel(keyboardShortcutsData);\n      this.view.setModel(keyboardShortcutsModel, \"keyboardShortcutsModel\");\n    }\n\n    // Popover build, open, close functions begin\n\n    async buildPopover() {\n      await buildPopover(this);\n    }\n\n    open(oButton, oData) {\n      open(oButton, oData, this);\n    }\n\n    onClose() {\n      onClose(this);\n    }\n\n    // Popover build, open, close functions end\n\n    // Sub Popover Open Handler Begin\n\n    onTabNavigationButtonPress(oEvent) {\n      onTabNavigationButtonPress(oEvent, { view: this.view });\n    }\n    onMoreFeaturesButtonPress(oEvent) {\n      onMoreFeaturesButtonPress(oEvent, { view: this.view });\n    }\n\n    // Sub Popover Open Handler End\n\n    // Font Size Feature Handlers Begin\n\n    onFontSizePress() {\n      const isExpanded = this.configModel.getProperty(\"/font/isExpanded\");\n      this.configModel.setProperty(\"/font/isExpanded\", !isExpanded);\n    }\n\n    onButtonFontSizeChangePress(action) {\n      updateFontSize(this.configModel, this.view, action);\n    }\n\n    // Font Size Feature Handlers End\n\n    // Read Website Feature Handlers Begin\n\n    onReadWebsitePress() {\n      const isExpanded = this.configModel.getProperty(\"/readWebsite/isExpanded\");\n      this.configModel.setProperty(\"/readWebsite/isExpanded\", !isExpanded);\n\n    }\n\n    onIconStartReadPress() {\n      const getVisibleText = getVisibleTextFromPage;\n      startReading(this.configModel, this.speechSynth, getVisibleText);\n    }\n\n    onIconStopReadPress() {\n      stopReading(this.configModel, this.speechSynth);\n    }\n\n    onButtonIncreaseSpeedPress() {\n      increaseSpeed(this.configModel, null, this.speechSynth);\n    }\n\n    onButtonDecreaseSpeedPress() {\n      decreaseSpeed(this.configModel, null, this.speechSynth);\n    }\n\n    // Read Website Feature Handlers End\n\n    // Contrast Mode Begin\n\n    onContrastModeButtonPress() {\n      onContrastModeButtonPress(this.configModel, document.body);\n    }\n\n    contrastPreviewBgColorPress(oEvent) {\n      contrastPreviewBgColorPress(oEvent, this.view, this.configModel);\n    }\n\n    contrastPreviewTextColorPress(oEvent) {\n      contrastPreviewTextColorPress(oEvent, this.view, this.configModel);\n    }\n\n    onButtonContrastResetPress() {\n      onButtonContrastResetPress(this.view, this.configModel);\n    }\n\n    onSaveButtonPress() {\n      onSaveButtonPress(this.view, this.configModel);\n    }\n\n    onCancelButtonPress() {\n      onCancelButtonPress(this.view, this.configModel);\n    }\n\n    // Contrast Mode End\n\n    // Hide Images Begin\n\n    onHideImagesButtonPress() {\n      this.imagesHidden = onHideImagesButtonPress(this.view, this.imagesHidden);\n    }\n\n\n    // Hide Images End\n\n    // Night Mode Begin\n\n    onNightModeButtonPress() {\n      onNightModeButtonPress(sap.ui.getCore());\n    }\n    // Night Mode End\n\n    // Blue Filter Begin\n\n    onButtonBlueFilterPress() {\n      onButtonBlueFilterPress(this.configModel, document.body);\n    }\n\n    onBlueFilterIntensitySliderLiveChange(oEvent) {\n      const intensity = oEvent.getParameter(\"value\");\n      onBlueFilterIntensitySliderLiveChange(this.configModel, intensity, document.body);\n    }\n\n\n\n    // Blue Filter End\n  }\n\n  var _package = npm_popover;\n\n  let exp = _package?.default || _package || { __emptyModule: true };try { Object.defineProperty(exp, \"__\" + \"esModule\", { value: true }); exp.default = exp; } catch (ex) {}\n\n  return exp;\n\n}));\n"
    }
  ]
}