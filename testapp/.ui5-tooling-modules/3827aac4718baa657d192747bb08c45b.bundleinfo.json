{
  "_entries": [
    {
      "name": "ui5_bfsg_popover",
      "path": "/home/user/projects/ui5_BFSG_Popover/package/index.js",
      "lastModified": 1736421364385,
      "type": "module",
      "code": "sap.ui.define(['sap/ui/model/json/JSONModel', 'sap/ui/core/Fragment'], (function (require$$0, require$$1) { 'use strict';\n\n    // fontSizeUtils.js\n\n    function updateFontSize(oModel, oView, action) {\n        const currentSize = oModel.getProperty(\"/fontConfig/fontSize\");\n        let newSize = currentSize;\n\n        if (action === \"increase\" && currentSize < 40) {\n            newSize += 2;\n        } else if (action === \"decrease\" && currentSize > 10) {\n            newSize -= 2;\n        } else if (action === \"reset\") {\n            newSize = 16;\n        }\n\n        oModel.setProperty(\"/fontConfig/fontSize\", newSize);\n        applyFontSizeToView(oView, newSize);\n    }\n\n    function applyFontSizeToView(oView, fontSize) {\n        oView.findAggregatedObjects(true, (oControl) => {\n            const oDomRef = oControl.getDomRef();\n            if (oDomRef) {\n                oDomRef.style.fontSize = fontSize + \"px\";\n                updateChildFontSize(oDomRef, fontSize);\n            }\n            return false;\n        });\n    }\n\n    function updateChildFontSize(domElement, fontSize) {\n        const childNodes = domElement.querySelectorAll(\"*\");\n        childNodes.forEach((child) => {\n            child.style.fontSize = fontSize + \"px\";\n        });\n    }\n\n    var fontSizeUtils$1 = {\n        updateFontSize,\n        applyFontSizeToView,\n        updateChildFontSize\n    };\n\n    const JSONModel = require$$0;\n    const Fragment = require$$1;\n    const fontSizeUtils = fontSizeUtils$1;\n\n    class BFSG_Popover {\n        constructor(view, control) {\n            this.view = view;\n            this.control = control;\n\n            this.genConfigModel();\n            this.buildPopover();\n            this.attachPress();\n            this.fetchStyle();\n\n            this.onButtonFontSizeChangePress = this.onButtonFontSizeChangePress.bind(this);\n        }\n\n        genConfigModel () {\n            this.configModel = new JSONModel({\n                \"fontConfig\": {\n                    fontSize: 16,\n                    contrastMode: false\n                },\n                \"contrastConfig\": {\n                    backgroundColor: \"white\",\n                    textColor: \"black\",\n                    previewBackgroundColor: \"white\",\n                    previewTextColor: \"black\"    \n                },\n                \"blueFilterConfig\": {\n                    blueFilterActive: false,\n                    blueFilterIntensity: 32,\n                    blaufilterExpanded: true    \n                },\n                \"readWebsiteConfig\": {\n                    speed: 1.0,\n                    volume: 40,\n                    isPlaying: false,\n                    isPaused: false,\n                    currentText: \"\",\n                    mouseReadingActive: false,\n                    lastReadElement: null    \n                }\n            });\n\n            this.view.setModel(this.configModel, \"configModel\");\n        }\n\n        onButtonFontSizeChangePress(action) {\n            console.log(\"Font size action triggered:\", action);\n            fontSizeUtils.updateFontSize(this.configModel, this.view, action);\n        }\n\n        \n        \n\n        // updateFontSize (oModel, oView, action) {\n        //     const currentSize = oModel.getProperty(\"/fontConfig/fontSize\");\n        //     let newSize = currentSize;\n\n        //     if (action === \"increase\" && currentSize < 40) {\n        //         newSize += 2;\n        //     } else if (action === \"decrease\" && currentSize > 10) {\n        //         newSize -= 2;\n        //     } else if (action === \"reset\") {\n        //         newSize = 16;\n        //     }\n\n        //     oModel.setProperty(\"/fontConfig/fontSize\", newSize);\n        //     this.applyFontSizeToView(oView, newSize);\n        // }\n\n        // applyFontSizeToView (oView, fontSize) {\n        //     oView.findAggregatedObjects(true, (oControl) => {\n        //         const oDomRef = oControl.getDomRef();\n        //         if (oDomRef) {\n        //             oDomRef.style.fontSize = fontSize + \"px\";\n        //             this.updateChildFontSize(oDomRef, fontSize);\n        //         }\n        //         return false;\n        //     });\n        // }\n        \n        // updateChildFontSize (domElement, fontSize) {\n        //     const childNodes = domElement.querySelectorAll(\"*\");\n        //     childNodes.forEach((child) => {\n        //         child.style.fontSize = fontSize + \"px\";\n        //     });\n        // }\n\n        attachPress() {\n            this.control.attachPress(this.open, this);\n        }\n\n        async buildPopover() {\n            const popover = await Fragment.load({\n                name: \"ui5_bfsg_popover.popover\",\n                controller: this\n            });\n            this.popover = popover;\n            this.view.addDependent(this.popover);\n        }\n\n        fetchStyle () {\n            let link = document.createElement('link');\n            link.rel = 'stylesheet';\n            link.type = 'text/css';\n            link.href = 'resources/ui5_bfsg_popover/bfsg_style.css';\n        \n            let headScript = document.querySelector('script');\n            headScript.parentNode.insertBefore(link, headScript);\n        };\n\n\n        open(event) {        \n            this.popover.openBy(event.getSource());\n        }\n\n        changeFontSize(event) {\n            const size = this.getValue();\n            document.documentElement.style.fontSize = `${size}px`;\n        }\n\n        changeContrastMode(event) {\n            const contrast = this.getValue();\n            contrast ?? this.configModel.setProperty(\"/blueLight\", 0);\n            document.body.classList.toggle(\"high-contrast\", contrast); \n        }\n\n        // Font Size Begin\n\n        onButtonFontSizeChangePress (action) {\n            this.updateFontSize(this.configModel, this.view, action);\n        }\n\n        changeBlueLight(event) {\n            let value = this.getValue();\n            value = (100 - value) / 100;\n            document.body.style.filter = `brightness(${value})`;\n        }\n\n        closePopover() {\n            this.popover.close();\n        }\n\n        onTabNavigationButtonPress(oEvent) {\n            this.handlePopover(oEvent, this.view, \"ui5_bfsg_popover.view.fragments.tabnavigation\", \"_pTabNavigationPopover\");\n        }\n\n        onColorBlindnessButtonPress(oEvent) {\n            this.handlePopover(oEvent, this.view, \"ui5_bfsg_popover.view.fragments.colorblindness\", \"_pColorBlindnessPopover\");\n        }\n\n        onHideImagesButtonPress(oEvent) {\n            this.handlePopover(oEvent, this.view, \"ui5_bfsg_popover.view.fragments.hideimages\", \"_pHideImagesPopover\");\n        }\n\n        onMoreFeaturesButtonPress(oEvent) {\n            this.handlePopover(oEvent, this.view, \"ui5_bfsg_popover.view.fragments.morefeatures\", \"_pMoreFeaturesPopover\");\n        }\n\n        handlePopover(oEvent, oView, fragmentName, popoverKey) {\n            if (!this[popoverKey]) {\n                this[popoverKey] = Fragment.load({\n                    id: oView.getId(),\n                    name: fragmentName,\n                    controller: oView.getController()\n                })\n                .then(function (oPopover) {\n                    oView.addDependent(oPopover);\n                    return oPopover;\n                }.bind(this))\n                .catch(function (err) {\n                    console.error(\"Fragment yüklenirken hata oluştu:\", err);\n                });\n            }\n            this[popoverKey].then(function (oPopover) {\n                if (oPopover) {\n                    oPopover.openBy(oEvent.getSource());\n                } else {\n                    console.error(\"Popover yüklenemedi veya bulunamadı.\");\n                }\n            });\n        }\n    }\n\n    var _package = BFSG_Popover;\n\n    let exp = _package?.default || _package || { __emptyModule: true };try { Object.defineProperty(exp, \"__\" + \"esModule\", { value: true }); exp.default = exp; } catch (ex) {}\n\n    return exp;\n\n}));\n"
    }
  ]
}