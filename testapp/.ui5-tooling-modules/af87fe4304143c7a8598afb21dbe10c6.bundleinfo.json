{
  "_entries": [
    {
      "name": "ui5_bfsg_popover",
      "path": "/home/user/projects/ui5_BFSG_Popover/package/index.js",
      "lastModified": 1736434690552,
      "type": "module",
      "code": "sap.ui.define(['sap/ui/model/json/JSONModel', 'sap/ui/core/Fragment', 'sap/m/MessageToast'], (function (require$$0, require$$1, require$$2) { 'use strict';\n\n  const JSONModel = require$$0;\n  const Fragment = require$$1;\n  const MessageToast = require$$2;\n\n  class BFSG_Popover {\n      constructor(view, control) {\n          this.view = view;\n          this.control = control;\n\n          this.genConfigModel();\n          this.buildPopover();\n          this.attachPress();\n          this.fetchStyle();\n\n\n          this._mouseHoverHandler = this._onMouseHoverRead.bind(this);\n          this._oSpeechSynth = window.speechSynthesis;\n          this._oUtterance = null;\n\n      }\n\n      genConfigModel () {\n          this.configModel = new JSONModel({\n              \"fontConfig\": {\n                  fontSize: 16,\n                  contrastMode: false\n              },\n              \"contrastConfig\": {\n                  backgroundColor: \"white\",\n                  textColor: \"black\",\n                  previewBackgroundColor: \"white\",\n                  previewTextColor: \"black\"    \n              },\n              \"blueFilterConfig\": {\n                  blueFilterActive: false,\n                  blueFilterIntensity: 32,\n                  blaufilterExpanded: true    \n              },\n              \"readWebsiteConfig\": {\n                  speed: 1.0,\n                  volume: 40,\n                  isPlaying: false,\n                  isPaused: false,\n                  currentText: \"\",\n                  mouseReadingActive: false,\n                  lastReadElement: null    \n              }\n          });\n\n          this.view.setModel(this.configModel, \"configModel\");\n      }\n\n      changeFontSize(event) {\n          const size = this.getValue();\n          document.documentElement.style.fontSize = `${size}px`;\n      }\n      \n\n      updateFontSize (oModel, oView, action) {\n          const currentSize = oModel.getProperty(\"/fontConfig/fontSize\");\n          let newSize = currentSize;\n\n          if (action === \"increase\" && currentSize < 40) {\n              newSize += 2;\n          } else if (action === \"decrease\" && currentSize > 10) {\n              newSize -= 2;\n          } else if (action === \"reset\") {\n              newSize = 16;\n          }\n\n          oModel.setProperty(\"/fontConfig/fontSize\", newSize);\n          this.applyFontSizeToView(oView, newSize);\n      }\n\n      applyFontSizeToView (oView, fontSize) {\n          oView.findAggregatedObjects(true, (oControl) => {\n              const oDomRef = oControl.getDomRef();\n              if (oDomRef) {\n                  oDomRef.style.fontSize = fontSize + \"px\";\n                  this.updateChildFontSize(oDomRef, fontSize);\n              }\n              return false;\n          });\n      }\n      \n      updateChildFontSize (domElement, fontSize) {\n          const childNodes = domElement.querySelectorAll(\"*\");\n          childNodes.forEach((child) => {\n              child.style.fontSize = fontSize + \"px\";\n          });\n      }\n\n      onButtonFontSizeChangePress (action) {\n          this.updateFontSize(this.configModel, this.view, action);\n      }\n\n      attachPress() {\n          this.control.attachPress(this.open, this);\n      }\n\n      async buildPopover() {\n          const popover = await Fragment.load({\n              name: \"ui5_bfsg_popover.popover\",\n              controller: this\n          });\n          this.popover = popover;\n          this.view.addDependent(this.popover);\n      }\n\n      fetchStyle () {\n          let link = document.createElement('link');\n          link.rel = 'stylesheet';\n          link.type = 'text/css';\n          link.href = 'resources/ui5_bfsg_popover/bfsg_style.css';\n      \n          let headScript = document.querySelector('script');\n          headScript.parentNode.insertBefore(link, headScript);\n      };\n\n\n      open(event) {        \n          this.popover.openBy(event.getSource());\n      }\n\n    \n\n      // Font Size Begin\n\n    \n\n\n      closePopover() {\n          this.popover.close();\n      }\n\n      // Popover Open Begin\n\n      onReadWebsiteButtonPress(oEvent) {\n          this.handlePopover(oEvent, this.view, \"ui5._bfsg_popover.view.fragments.readwebsite\", \"_pReadWebsitePopover\");\n      }\n\n      onMoreColorsButtonPress(oEvent) {\n          this.handlePopover(oEvent, this.view, \"ui5_bfsg_popover.view.fragments.morecolors\", \"_oMoreColorsPopover\");\n      }\n              \n      onImageAccessPress(oEvent) {\n          this.handlePopover(oEvent, this.view, \"ui5_bfsg_popover.view.fragments.accesspopover\", \"_oPopover\");\n      }\n\n      onButtonSettingsPress(oEvent) {\n          this.handlePopover(oEvent, this.view, \"ui5_bfsg_popover.view.fragments.settings\", \"_pSettingsPopover\");\n      }\n\n      onButtonInfoPress(oEvent) {\n          this.handlePopover(oEvent, this.view, \"ui5_bfsg_popover.view.fragments.info\", \"_pInfoPopover\");\n      }\n\n      onInstantViewButtonPress(oEvent) {\n          this.handlePopover(oEvent, this.view, \"ui5_bfsg_popover.view.fragments.instantview\", \"_pInstantViewPopover\");\n      }\n\n\n      onTabNavigationButtonPress(oEvent) {\n          this.handlePopover(oEvent, this.view, \"ui5_bfsg_popover.view.fragments.tabnavigation\", \"_pTabNavigationPopover\");\n      }\n\n      onColorBlindnessButtonPress(oEvent) {\n          this.handlePopover(oEvent, this.view, \"ui5_bfsg_popover.view.fragments.colorblindness\", \"_pColorBlindnessPopover\");\n      }\n\n      onHideImagesButtonPress(oEvent) {\n          this.handlePopover(oEvent, this.view, \"ui5_bfsg_popover.view.fragments.hideimages\", \"_pHideImagesPopover\");\n      }\n\n      onMoreFeaturesButtonPress(oEvent) {\n          this.handlePopover(oEvent, this.view, \"ui5_bfsg_popover.view.fragments.morefeatures\", \"_pMoreFeaturesPopover\");\n      }\n\n      handlePopover(oEvent, oView, fragmentName, popoverKey) {\n          if (!this[popoverKey]) {\n              this[popoverKey] = Fragment.load({\n                  id: oView.getId(),\n                  name: fragmentName,\n                  controller: oView.getController()\n              })\n              .then(function (oPopover) {\n                  oView.addDependent(oPopover);\n                  return oPopover;\n              }.bind(this))\n              .catch(function (err) {\n                  console.error(\"Fragment yüklenirken hata oluştu:\", err);\n              });\n          }\n          this[popoverKey].then(function (oPopover) {\n              if (oPopover) {\n                  oPopover.openBy(oEvent.getSource());\n              } else {\n                  console.error(\"Popover yüklenemedi veya bulunamadı.\");\n              }\n          });\n      }\n\n      // Popover Open End\n\n      //Contrast Mode Begin\n\n      onButtonBackgroundBlackPress() {\n          console.log(\"Black Button klicked\");\n          this._updatePreview(\"black\", this._getCurrentTextColor());\n      }\n\n      onButtonBackgroundWhitePress() {\n          this._updatePreview(\"white\", this._getCurrentTextColor());\n      }\n\n      onButtonBackgroundRedPress() {\n          this._updatePreview(\"red\", this._getCurrentTextColor());\n      }\n\n      onButtonBackgroundYellowPress() {\n          this._updatePreview(\"yellow\", this._getCurrentTextColor());\n      }\n      onButtonBackgroundGreenPress() {\n          this._updatePreview(\"green\", this._getCurrentTextColor());\n      }\n      onButtonBackgroundBluePress() {\n          this._updatePreview(\"blue\", this._getCurrentTextColor());\n      }\n\n      onButtonTextBlackPress() {\n          this._updateTextColor(\"black\");\n      }\n\n      onButtonTextWhitePress() {\n          this._updateTextColor(\"white\");\n      }\n\n      onButtonTextRedPress() {\n          this._updateTextColor(\"red\");\n      }\n\n      onButtonTextYellowPress() {\n          this._updateTextColor(\"yellow\");\n      }\n      onButtonTextGreenPress() {\n          this._updateTextColor(\"green\");\n      }\n      onButtonTextBluePress() {\n          this._updateTextColor(\"blue\");\n      }\n\n      onSaveButtonPress () {\n          var oText = this.byId(\"idCanYouReadThisText\");\n          var backgroundColor = oText.getDomRef().style.backgroundColor || \"white\";\n          var textColor = oText.getDomRef().style.color || \"black\";\n\n         \n          this.applyColorsToPage(backgroundColor, textColor);\n\n         \n          this._closePopover();\n\n       \n          MessageToast.show(\"Colors applied successfully!\");\n      }\n\n      onCancelButtonPress () {\n          this._closePopover();\n      }\n\n      onButtonContrastResetPress () {\n          const defaultBackgroundColor = \"white\";\n          const defaultTextColor = \"black\";\n          const oView = this.view;\n          const aControls = oView.findAggregatedObjects(true, function (oControl) {\n              return oControl.getDomRef() !== null;\n          });\n          aControls.forEach((oControl) => {\n              const oDomRef = oControl.getDomRef();\n              if (oDomRef) {\n                  oDomRef.style.backgroundColor = \"\"; \n                  oDomRef.style.color = \"\"; \n                  const childNodes = oDomRef.querySelectorAll(\"*\");\n                  childNodes.forEach((child) => {\n                      child.style.backgroundColor = \"\";\n                      child.style.color = \"\"; \n                  });\n              }\n          });\n          const oModel = this.view.getProperty(\"contrastModel\");\n          if (oModel) {\n              oModel.setProperty(\"/readWebsiteConfig/backgroundColor\", defaultBackgroundColor);\n              oModel.setProperty(\"/readWebsiteConfig/textColor\", defaultTextColor);\n              oModel.setProperty(\"/readWebsiteConfig/previewBackgroundColor\", defaultBackgroundColor);\n              oModel.setProperty(\"/readWebsiteConfig/previewTextColor\", defaultTextColor);\n          }\n          const oText = this.byId(\"idCanYouReadThisText\");\n          if (oText && oText.getDomRef()) {\n              oText.getDomRef().style.backgroundColor = defaultBackgroundColor;\n              oText.getDomRef().style.color = defaultTextColor;\n          }\n      \n          sap.m.MessageToast.show(\"All changes have been reset to default values.\");\n      }\n      \n      \n      \n      \n\n      applyColorsToPage (backgroundColor, textColor) {\n          const allElements = document.body.querySelectorAll(\"*\");\n\n          allElements.forEach((element) => {\n              if (!element.closest(\".contrastmode-popover\")) {\n                  element.style.backgroundColor = backgroundColor;\n                  element.style.color = textColor;\n              }\n          });\n      }\n\n      updateChildColors (domElement, backgroundColor, textColor) {\n          const childNodes = domElement.querySelectorAll(\"*\");\n          childNodes.forEach((child) => {\n              child.style.backgroundColor = backgroundColor;\n              child.style.color = textColor;\n          });\n      }\n\n      _closePopover () {\n          var oPopover = this.byId(\"idMoreColorsResponsivePopover\");\n          if (oPopover) {\n              oPopover.close();\n          }\n      }\n\n      _updatePreview(backgroundColor, textColor) {\n          var oText = this.byId(\"idCanYouReadThisText\");\n          if (oText) {\n              oText.getDomRef().style.backgroundColor = backgroundColor;\n              oText.getDomRef().style.color = textColor;\n          }\n      }\n\n      _updateTextColor(textColor) {\n          var oText = this.byId(\"idCanYouReadThisText\");\n          if (oText) {\n              oText.getDomRef().style.color = textColor;\n          }\n      }\n\n      _getCurrentTextColor() {\n          var oText = this.byId(\"idCanYouReadThisText\");\n          if (oText && oText.getDomRef()) {\n              return oText.getDomRef().style.color || \"black\"; // Default to black\n          }\n          return \"black\";\n      }\n\n      //Contrast Mode End\n\n\n  }\n\n  var _package = BFSG_Popover;\n\n  let exp = _package?.default || _package || { __emptyModule: true };try { Object.defineProperty(exp, \"__\" + \"esModule\", { value: true }); exp.default = exp; } catch (ex) {}\n\n  return exp;\n\n}));\n"
    }
  ]
}