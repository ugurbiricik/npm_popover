{
  "_entries": [
    {
      "name": "ui5_bfsg_popover",
      "path": "/home/user/projects/ui5_BFSG_Popover/package/index.js",
      "lastModified": 1736354894052,
      "type": "module",
      "code": "sap.ui.define(['sap/ui/model/json/JSONModel', 'sap/ui/core/Fragment'], (function (require$$1, require$$2) { 'use strict';\n\n    var FontSizeHelper$1 = {};\n\n    sap.ui.define([], function () {\n      return {\n        updateFontSize: function (oModel, oView, action) {\n          const currentSize = oModel.getProperty(\"/fontSize\");\n          let newSize = currentSize;\n          if (action === \"increase\" && currentSize < 40) {\n            newSize += 2;\n          } else if (action === \"decrease\" && currentSize > 10) {\n            newSize -= 2;\n          } else if (action === \"reset\") {\n            newSize = 16;\n          }\n          oModel.setProperty(\"/fontSize\", newSize);\n          this.applyFontSizeToView(oView, newSize);\n        },\n        applyFontSizeToView: function (oView, fontSize) {\n          oView.findAggregatedObjects(true, oControl => {\n            const oDomRef = oControl.getDomRef();\n            if (oDomRef) {\n              oDomRef.style.fontSize = fontSize + \"px\";\n              this.updateChildFontSize(oDomRef, fontSize);\n            }\n            return false;\n          });\n        },\n        updateChildFontSize: function (domElement, fontSize) {\n          const childNodes = domElement.querySelectorAll(\"*\");\n          childNodes.forEach(child => {\n            child.style.fontSize = fontSize + \"px\";\n          });\n        }\n      };\n    });\n\n    const FontSizeHelper = FontSizeHelper$1;\n    const JSONModel = require$$1;\n    const Fragment = require$$2;\n    class BFSG_Popover {\n        constructor(view, control) {\n            this.view = view;\n            this.control = control;\n\n            this.genConfigModel();\n            this.buildPopover();\n            this.attachPress();\n            this.fetchStyle();\n        }\n\n        genConfigModel () {\n            this.configModel = new JSONModel({\n                \"fontConfig\": {\n                    fontSize: 16,\n                    contrastMode: false\n                },\n                \"contrastConfig\": {\n                    backgroundColor: \"white\",\n                    textColor: \"black\",\n                    previewBackgroundColor: \"white\",\n                    previewTextColor: \"black\"    \n                },\n                \"blueFilterConfig\": {\n                    blueFilterActive: false,\n                    blueFilterIntensity: 32,\n                    blaufilterExpanded: true    \n                },\n                \"readWebsiteConfig\": {\n                    speed: 1.0,\n                    volume: 40,\n                    isPlaying: false,\n                    isPaused: false,\n                    currentText: \"\",\n                    mouseReadingActive: false,\n                    lastReadElement: null    \n                }\n            });\n\n            this.view.setModel(this.configModel, \"configModel\");\n        }\n\n         /*\n        getHandler () {\n            return {\n                \"fontSize\": {\n                \"value\": document.documentElement.style.fontSize.split(\"px\")[0],\n                \"callback\": this.changeFontSize\n                },\n                \"contrastMode\": {\n                    \"value\": false,\n                    \"callback\": this.changeContrastMode\n                },\n                \"blueLight\": {\n                    \"value\": 0,\n                    \"callback\": this.changeBlueLight\n                }\n            };        \n        }\n\n       \n        attachChangeToModel() {\n            const handler = this.getHandler();\n            const config = this.configModel.getData();\n            for(let key in config){\n                let binding = this.configModel.bindProperty(`/${key}`);\n                binding.attachChange(handler[key].callback);\n            }\n        }\n        */\n        \n        attachPress() {\n            //TODO: check for press event availability\n            this.control.attachPress(this.open, this);\n        }\n\n        async buildPopover() {\n            const popover = await Fragment.load({\n                name: \"ui5_bfsg_popover.popover\",\n                controller: this\n            });\n            this.popover = popover;\n            this.view.addDependent(this.popover);\n        }\n\n        fetchStyle () {\n            let link = document.createElement('link');\n            link.rel = 'stylesheet';\n            link.type = 'text/css';\n            link.href = 'resources/ui5_bfsg_popover/bfsg_style.css';\n        \n            let headScript = document.querySelector('script');\n            headScript.parentNode.insertBefore(link, headScript);\n        };\n\n\n        open(event) {        \n            this.popover.openBy(event.getSource());\n        }\n\n        changeFontSize(event) {\n            const size = this.getValue();\n            document.documentElement.style.fontSize = `${size}px`;\n        }\n\n        changeContrastMode(event) {\n            const contrast = this.getValue();\n            contrast ?? this.configModel.setProperty(\"/blueLight\", 0);\n            document.body.classList.toggle(\"high-contrast\", contrast); \n        }\n\n        // Font Size Begin\n\n        onButtonFontSizeChangePress (action) {\n            FontSizeHelper.updateFontSize(this.configModel, this.view, action);\n        }\n\n        changeBlueLight(event) {\n            let value = this.getValue();\n            value = (100 - value) / 100;\n            document.body.style.filter = `brightness(${value})`;\n        }\n\n      closePopover() {\n        this.popover.close();\n      }\n    }\n\n    var _package = BFSG_Popover;\n\n    let exp = _package?.default || _package || { __emptyModule: true };try { Object.defineProperty(exp, \"__\" + \"esModule\", { value: true }); exp.default = exp; } catch (ex) {}\n\n    return exp;\n\n}));\n"
    }
  ]
}